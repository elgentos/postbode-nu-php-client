<?php
/**
 * Pricing
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Postbode.nu
 *
 * Postbode.nu API for sending letters   # Getting started  ## Authentication  To make use of the API one needs a account and an API-Key  Account: https://app.postbode.nu/register<br/> API Key: https://app.postbode.nu/settings/api -> \"API Key Aanmaken\"  Use API key in header: > X-Authorization: XXXXXXXXX-YOUR-API-KEY-XXXXXXXXX   ## Sandbox mode  For testing purposes there is a sandbox mode.   To activate: https://app.postbode.nu/mailbox/settings -> Testomgeving  While active no letters will be send in production. After disabling only new letters will be printed and send to reciever.   ## Billing  Payement by letter and upfront via you mailbox balance.  To deposit credit: Login app.postbode.nu -> Tegoed -> Tegoed aanvullen  For seamless experience activate auto deposit. Please reach out to us on postkantoor@postbode.nu for activation.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Pricing Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Pricing implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Pricing';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'sale_price' => 'double',
        'sale_price_in_vat' => 'double',
        'printing' => '\Swagger\Client\Model\Printing',
        'envelope' => '\Swagger\Client\Model\Envelope',
        'shipment' => '\Swagger\Client\Model\Shipment',
        'vat' => 'string',
        'available_balance' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'sale_price' => 'sale_price',
        'sale_price_in_vat' => 'sale_price_in_vat',
        'printing' => 'printing',
        'envelope' => 'envelope',
        'shipment' => 'shipment',
        'vat' => 'vat',
        'available_balance' => 'available_balance'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'sale_price' => 'setSalePrice',
        'sale_price_in_vat' => 'setSalePriceInVat',
        'printing' => 'setPrinting',
        'envelope' => 'setEnvelope',
        'shipment' => 'setShipment',
        'vat' => 'setVat',
        'available_balance' => 'setAvailableBalance'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'sale_price' => 'getSalePrice',
        'sale_price_in_vat' => 'getSalePriceInVat',
        'printing' => 'getPrinting',
        'envelope' => 'getEnvelope',
        'shipment' => 'getShipment',
        'vat' => 'getVat',
        'available_balance' => 'getAvailableBalance'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sale_price'] = isset($data['sale_price']) ? $data['sale_price'] : null;
        $this->container['sale_price_in_vat'] = isset($data['sale_price_in_vat']) ? $data['sale_price_in_vat'] : null;
        $this->container['printing'] = isset($data['printing']) ? $data['printing'] : null;
        $this->container['envelope'] = isset($data['envelope']) ? $data['envelope'] : null;
        $this->container['shipment'] = isset($data['shipment']) ? $data['shipment'] : null;
        $this->container['vat'] = isset($data['vat']) ? $data['vat'] : null;
        $this->container['available_balance'] = isset($data['available_balance']) ? $data['available_balance'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['sale_price'] === null) {
            $invalid_properties[] = "'sale_price' can't be null";
        }
        if ($this->container['sale_price_in_vat'] === null) {
            $invalid_properties[] = "'sale_price_in_vat' can't be null";
        }
        if ($this->container['printing'] === null) {
            $invalid_properties[] = "'printing' can't be null";
        }
        if ($this->container['envelope'] === null) {
            $invalid_properties[] = "'envelope' can't be null";
        }
        if ($this->container['shipment'] === null) {
            $invalid_properties[] = "'shipment' can't be null";
        }
        if ($this->container['vat'] === null) {
            $invalid_properties[] = "'vat' can't be null";
        }
        if ($this->container['available_balance'] === null) {
            $invalid_properties[] = "'available_balance' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['sale_price'] === null) {
            return false;
        }
        if ($this->container['sale_price_in_vat'] === null) {
            return false;
        }
        if ($this->container['printing'] === null) {
            return false;
        }
        if ($this->container['envelope'] === null) {
            return false;
        }
        if ($this->container['shipment'] === null) {
            return false;
        }
        if ($this->container['vat'] === null) {
            return false;
        }
        if ($this->container['available_balance'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets sale_price
     * @return double
     */
    public function getSalePrice()
    {
        return $this->container['sale_price'];
    }

    /**
     * Sets sale_price
     * @param double $sale_price
     * @return $this
     */
    public function setSalePrice($sale_price)
    {
        $this->container['sale_price'] = $sale_price;

        return $this;
    }

    /**
     * Gets sale_price_in_vat
     * @return double
     */
    public function getSalePriceInVat()
    {
        return $this->container['sale_price_in_vat'];
    }

    /**
     * Sets sale_price_in_vat
     * @param double $sale_price_in_vat
     * @return $this
     */
    public function setSalePriceInVat($sale_price_in_vat)
    {
        $this->container['sale_price_in_vat'] = $sale_price_in_vat;

        return $this;
    }

    /**
     * Gets printing
     * @return \Swagger\Client\Model\Printing
     */
    public function getPrinting()
    {
        return $this->container['printing'];
    }

    /**
     * Sets printing
     * @param \Swagger\Client\Model\Printing $printing
     * @return $this
     */
    public function setPrinting($printing)
    {
        $this->container['printing'] = $printing;

        return $this;
    }

    /**
     * Gets envelope
     * @return \Swagger\Client\Model\Envelope
     */
    public function getEnvelope()
    {
        return $this->container['envelope'];
    }

    /**
     * Sets envelope
     * @param \Swagger\Client\Model\Envelope $envelope
     * @return $this
     */
    public function setEnvelope($envelope)
    {
        $this->container['envelope'] = $envelope;

        return $this;
    }

    /**
     * Gets shipment
     * @return \Swagger\Client\Model\Shipment
     */
    public function getShipment()
    {
        return $this->container['shipment'];
    }

    /**
     * Sets shipment
     * @param \Swagger\Client\Model\Shipment $shipment
     * @return $this
     */
    public function setShipment($shipment)
    {
        $this->container['shipment'] = $shipment;

        return $this;
    }

    /**
     * Gets vat
     * @return string
     */
    public function getVat()
    {
        return $this->container['vat'];
    }

    /**
     * Sets vat
     * @param string $vat
     * @return $this
     */
    public function setVat($vat)
    {
        $this->container['vat'] = $vat;

        return $this;
    }

    /**
     * Gets available_balance
     * @return string
     */
    public function getAvailableBalance()
    {
        return $this->container['available_balance'];
    }

    /**
     * Sets available_balance
     * @param string $available_balance
     * @return $this
     */
    public function setAvailableBalance($available_balance)
    {
        $this->container['available_balance'] = $available_balance;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


