<?php
/**
 * CreateacceptgiroRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Postbode.nu
 *
 * Postbode.nu API for sending letters   # Getting started  ## Authentication  To make use of the API one needs a account and an API-Key  Account: https://app.postbode.nu/register<br/> API Key: https://app.postbode.nu/settings/api -> \"API Key Aanmaken\"  Use API key in header: > X-Authorization: XXXXXXXXX-YOUR-API-KEY-XXXXXXXXX   ## Sandbox mode  For testing purposes there is a sandbox mode.   To activate: https://app.postbode.nu/mailbox/settings -> Testomgeving  While active no letters will be send in production. After disabling only new letters will be printed and send to reciever.   ## Billing  Payement by letter and upfront via you mailbox balance.  To deposit credit: Login app.postbode.nu -> Tegoed -> Tegoed aanvullen  For seamless experience activate auto deposit. Please reach out to us on postkantoor@postbode.nu for activation.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * CreateacceptgiroRequest Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CreateacceptgiroRequest implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CreateacceptgiroRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'documents' => '\Swagger\Client\Model\Document[]',
        'envelope_id' => 'int',
        'country' => 'string',
        'registered' => 'bool',
        'send' => 'bool',
        'acceptgiro' => '\Swagger\Client\Model\Acceptgiro'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'documents' => 'documents',
        'envelope_id' => 'envelope_id',
        'country' => 'country',
        'registered' => 'registered',
        'send' => 'send',
        'acceptgiro' => 'acceptgiro'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'documents' => 'setDocuments',
        'envelope_id' => 'setEnvelopeId',
        'country' => 'setCountry',
        'registered' => 'setRegistered',
        'send' => 'setSend',
        'acceptgiro' => 'setAcceptgiro'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'documents' => 'getDocuments',
        'envelope_id' => 'getEnvelopeId',
        'country' => 'getCountry',
        'registered' => 'getRegistered',
        'send' => 'getSend',
        'acceptgiro' => 'getAcceptgiro'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['documents'] = isset($data['documents']) ? $data['documents'] : null;
        $this->container['envelope_id'] = isset($data['envelope_id']) ? $data['envelope_id'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['registered'] = isset($data['registered']) ? $data['registered'] : null;
        $this->container['send'] = isset($data['send']) ? $data['send'] : null;
        $this->container['acceptgiro'] = isset($data['acceptgiro']) ? $data['acceptgiro'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['documents'] === null) {
            $invalid_properties[] = "'documents' can't be null";
        }
        if ($this->container['envelope_id'] === null) {
            $invalid_properties[] = "'envelope_id' can't be null";
        }
        if ($this->container['country'] === null) {
            $invalid_properties[] = "'country' can't be null";
        }
        if ($this->container['registered'] === null) {
            $invalid_properties[] = "'registered' can't be null";
        }
        if ($this->container['send'] === null) {
            $invalid_properties[] = "'send' can't be null";
        }
        if ($this->container['acceptgiro'] === null) {
            $invalid_properties[] = "'acceptgiro' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['documents'] === null) {
            return false;
        }
        if ($this->container['envelope_id'] === null) {
            return false;
        }
        if ($this->container['country'] === null) {
            return false;
        }
        if ($this->container['registered'] === null) {
            return false;
        }
        if ($this->container['send'] === null) {
            return false;
        }
        if ($this->container['acceptgiro'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets documents
     * @return \Swagger\Client\Model\Document[]
     */
    public function getDocuments()
    {
        return $this->container['documents'];
    }

    /**
     * Sets documents
     * @param \Swagger\Client\Model\Document[] $documents
     * @return $this
     */
    public function setDocuments($documents)
    {
        $this->container['documents'] = $documents;

        return $this;
    }

    /**
     * Gets envelope_id
     * @return int
     */
    public function getEnvelopeId()
    {
        return $this->container['envelope_id'];
    }

    /**
     * Sets envelope_id
     * @param int $envelope_id
     * @return $this
     */
    public function setEnvelopeId($envelope_id)
    {
        $this->container['envelope_id'] = $envelope_id;

        return $this;
    }

    /**
     * Gets country
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     * @param string $country
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets registered
     * @return bool
     */
    public function getRegistered()
    {
        return $this->container['registered'];
    }

    /**
     * Sets registered
     * @param bool $registered
     * @return $this
     */
    public function setRegistered($registered)
    {
        $this->container['registered'] = $registered;

        return $this;
    }

    /**
     * Gets send
     * @return bool
     */
    public function getSend()
    {
        return $this->container['send'];
    }

    /**
     * Sets send
     * @param bool $send
     * @return $this
     */
    public function setSend($send)
    {
        $this->container['send'] = $send;

        return $this;
    }

    /**
     * Gets acceptgiro
     * @return \Swagger\Client\Model\Acceptgiro
     */
    public function getAcceptgiro()
    {
        return $this->container['acceptgiro'];
    }

    /**
     * Sets acceptgiro
     * @param \Swagger\Client\Model\Acceptgiro $acceptgiro
     * @return $this
     */
    public function setAcceptgiro($acceptgiro)
    {
        $this->container['acceptgiro'] = $acceptgiro;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


