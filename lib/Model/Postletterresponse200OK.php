<?php
/**
 * Postletterresponse200OK
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Postbode.nu
 *
 * Postbode.nu API for sending letters   # Getting started  ## Authentication  To make use of the API one needs a account and an API-Key  Account: https://app.postbode.nu/register<br/> API Key: https://app.postbode.nu/settings/api -> \"API Key Aanmaken\"  Use API key in header: > X-Authorization: XXXXXXXXX-YOUR-API-KEY-XXXXXXXXX   ## Sandbox mode  For testing purposes there is a sandbox mode.   To activate: https://app.postbode.nu/mailbox/settings -> Testomgeving  While active no letters will be send in production. After disabling only new letters will be printed and send to reciever.   ## Billing  Payement by letter and upfront via you mailbox balance.  To deposit credit: Login app.postbode.nu -> Tegoed -> Tegoed aanvullen  For seamless experience activate auto deposit. Please reach out to us on postkantoor@postbode.nu for activation.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Postletterresponse200OK Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Postletterresponse200OK implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Postletterresponse200OK';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'envelope_id' => 'int',
        'service' => 'string',
        'status' => 'string',
        'color' => 'string',
        'printing' => 'string',
        'paper_weight' => 'string',
        'paper_size' => 'string',
        'tracking_code' => 'string',
        'formatted_id' => 'string',
        'shipping_id' => 'int',
        'weight' => 'int',
        'pages' => 'int',
        'sheets' => 'int',
        'pricing' => '\Swagger\Client\Model\Pricing',
        'documents' => '\Swagger\Client\Model\Document1[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'envelope_id' => 'envelope_id',
        'service' => 'service',
        'status' => 'status',
        'color' => 'color',
        'printing' => 'printing',
        'paper_weight' => 'paper_weight',
        'paper_size' => 'paper_size',
        'tracking_code' => 'tracking_code',
        'formatted_id' => 'formatted_id',
        'shipping_id' => 'shipping_id',
        'weight' => 'weight',
        'pages' => 'pages',
        'sheets' => 'sheets',
        'pricing' => 'pricing',
        'documents' => 'documents'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'envelope_id' => 'setEnvelopeId',
        'service' => 'setService',
        'status' => 'setStatus',
        'color' => 'setColor',
        'printing' => 'setPrinting',
        'paper_weight' => 'setPaperWeight',
        'paper_size' => 'setPaperSize',
        'tracking_code' => 'setTrackingCode',
        'formatted_id' => 'setFormattedId',
        'shipping_id' => 'setShippingId',
        'weight' => 'setWeight',
        'pages' => 'setPages',
        'sheets' => 'setSheets',
        'pricing' => 'setPricing',
        'documents' => 'setDocuments'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'envelope_id' => 'getEnvelopeId',
        'service' => 'getService',
        'status' => 'getStatus',
        'color' => 'getColor',
        'printing' => 'getPrinting',
        'paper_weight' => 'getPaperWeight',
        'paper_size' => 'getPaperSize',
        'tracking_code' => 'getTrackingCode',
        'formatted_id' => 'getFormattedId',
        'shipping_id' => 'getShippingId',
        'weight' => 'getWeight',
        'pages' => 'getPages',
        'sheets' => 'getSheets',
        'pricing' => 'getPricing',
        'documents' => 'getDocuments'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['envelope_id'] = isset($data['envelope_id']) ? $data['envelope_id'] : null;
        $this->container['service'] = isset($data['service']) ? $data['service'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['color'] = isset($data['color']) ? $data['color'] : null;
        $this->container['printing'] = isset($data['printing']) ? $data['printing'] : null;
        $this->container['paper_weight'] = isset($data['paper_weight']) ? $data['paper_weight'] : null;
        $this->container['paper_size'] = isset($data['paper_size']) ? $data['paper_size'] : null;
        $this->container['tracking_code'] = isset($data['tracking_code']) ? $data['tracking_code'] : null;
        $this->container['formatted_id'] = isset($data['formatted_id']) ? $data['formatted_id'] : null;
        $this->container['shipping_id'] = isset($data['shipping_id']) ? $data['shipping_id'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
        $this->container['pages'] = isset($data['pages']) ? $data['pages'] : null;
        $this->container['sheets'] = isset($data['sheets']) ? $data['sheets'] : null;
        $this->container['pricing'] = isset($data['pricing']) ? $data['pricing'] : null;
        $this->container['documents'] = isset($data['documents']) ? $data['documents'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['id'] === null) {
            $invalid_properties[] = "'id' can't be null";
        }
        if ($this->container['envelope_id'] === null) {
            $invalid_properties[] = "'envelope_id' can't be null";
        }
        if ($this->container['service'] === null) {
            $invalid_properties[] = "'service' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalid_properties[] = "'status' can't be null";
        }
        if ($this->container['color'] === null) {
            $invalid_properties[] = "'color' can't be null";
        }
        if ($this->container['printing'] === null) {
            $invalid_properties[] = "'printing' can't be null";
        }
        if ($this->container['paper_weight'] === null) {
            $invalid_properties[] = "'paper_weight' can't be null";
        }
        if ($this->container['paper_size'] === null) {
            $invalid_properties[] = "'paper_size' can't be null";
        }
        if ($this->container['formatted_id'] === null) {
            $invalid_properties[] = "'formatted_id' can't be null";
        }
        if ($this->container['shipping_id'] === null) {
            $invalid_properties[] = "'shipping_id' can't be null";
        }
        if ($this->container['weight'] === null) {
            $invalid_properties[] = "'weight' can't be null";
        }
        if ($this->container['pages'] === null) {
            $invalid_properties[] = "'pages' can't be null";
        }
        if ($this->container['sheets'] === null) {
            $invalid_properties[] = "'sheets' can't be null";
        }
        if ($this->container['pricing'] === null) {
            $invalid_properties[] = "'pricing' can't be null";
        }
        if ($this->container['documents'] === null) {
            $invalid_properties[] = "'documents' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['envelope_id'] === null) {
            return false;
        }
        if ($this->container['service'] === null) {
            return false;
        }
        if ($this->container['status'] === null) {
            return false;
        }
        if ($this->container['color'] === null) {
            return false;
        }
        if ($this->container['printing'] === null) {
            return false;
        }
        if ($this->container['paper_weight'] === null) {
            return false;
        }
        if ($this->container['paper_size'] === null) {
            return false;
        }
        if ($this->container['formatted_id'] === null) {
            return false;
        }
        if ($this->container['shipping_id'] === null) {
            return false;
        }
        if ($this->container['weight'] === null) {
            return false;
        }
        if ($this->container['pages'] === null) {
            return false;
        }
        if ($this->container['sheets'] === null) {
            return false;
        }
        if ($this->container['pricing'] === null) {
            return false;
        }
        if ($this->container['documents'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets envelope_id
     * @return int
     */
    public function getEnvelopeId()
    {
        return $this->container['envelope_id'];
    }

    /**
     * Sets envelope_id
     * @param int $envelope_id
     * @return $this
     */
    public function setEnvelopeId($envelope_id)
    {
        $this->container['envelope_id'] = $envelope_id;

        return $this;
    }

    /**
     * Gets service
     * @return string
     */
    public function getService()
    {
        return $this->container['service'];
    }

    /**
     * Sets service
     * @param string $service
     * @return $this
     */
    public function setService($service)
    {
        $this->container['service'] = $service;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets color
     * @return string
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     * @param string $color
     * @return $this
     */
    public function setColor($color)
    {
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets printing
     * @return string
     */
    public function getPrinting()
    {
        return $this->container['printing'];
    }

    /**
     * Sets printing
     * @param string $printing
     * @return $this
     */
    public function setPrinting($printing)
    {
        $this->container['printing'] = $printing;

        return $this;
    }

    /**
     * Gets paper_weight
     * @return string
     */
    public function getPaperWeight()
    {
        return $this->container['paper_weight'];
    }

    /**
     * Sets paper_weight
     * @param string $paper_weight
     * @return $this
     */
    public function setPaperWeight($paper_weight)
    {
        $this->container['paper_weight'] = $paper_weight;

        return $this;
    }

    /**
     * Gets paper_size
     * @return string
     */
    public function getPaperSize()
    {
        return $this->container['paper_size'];
    }

    /**
     * Sets paper_size
     * @param string $paper_size
     * @return $this
     */
    public function setPaperSize($paper_size)
    {
        $this->container['paper_size'] = $paper_size;

        return $this;
    }

    /**
     * Gets tracking_code
     * @return string
     */
    public function getTrackingCode()
    {
        return $this->container['tracking_code'];
    }

    /**
     * Sets tracking_code
     * @param string $tracking_code
     * @return $this
     */
    public function setTrackingCode($tracking_code)
    {
        $this->container['tracking_code'] = $tracking_code;

        return $this;
    }

    /**
     * Gets formatted_id
     * @return string
     */
    public function getFormattedId()
    {
        return $this->container['formatted_id'];
    }

    /**
     * Sets formatted_id
     * @param string $formatted_id
     * @return $this
     */
    public function setFormattedId($formatted_id)
    {
        $this->container['formatted_id'] = $formatted_id;

        return $this;
    }

    /**
     * Gets shipping_id
     * @return int
     */
    public function getShippingId()
    {
        return $this->container['shipping_id'];
    }

    /**
     * Sets shipping_id
     * @param int $shipping_id
     * @return $this
     */
    public function setShippingId($shipping_id)
    {
        $this->container['shipping_id'] = $shipping_id;

        return $this;
    }

    /**
     * Gets weight
     * @return int
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     * @param int $weight
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets pages
     * @return int
     */
    public function getPages()
    {
        return $this->container['pages'];
    }

    /**
     * Sets pages
     * @param int $pages
     * @return $this
     */
    public function setPages($pages)
    {
        $this->container['pages'] = $pages;

        return $this;
    }

    /**
     * Gets sheets
     * @return int
     */
    public function getSheets()
    {
        return $this->container['sheets'];
    }

    /**
     * Sets sheets
     * @param int $sheets
     * @return $this
     */
    public function setSheets($sheets)
    {
        $this->container['sheets'] = $sheets;

        return $this;
    }

    /**
     * Gets pricing
     * @return \Swagger\Client\Model\Pricing
     */
    public function getPricing()
    {
        return $this->container['pricing'];
    }

    /**
     * Sets pricing
     * @param \Swagger\Client\Model\Pricing $pricing
     * @return $this
     */
    public function setPricing($pricing)
    {
        $this->container['pricing'] = $pricing;

        return $this;
    }

    /**
     * Gets documents
     * @return \Swagger\Client\Model\Document1[]
     */
    public function getDocuments()
    {
        return $this->container['documents'];
    }

    /**
     * Sets documents
     * @param \Swagger\Client\Model\Document1[] $documents
     * @return $this
     */
    public function setDocuments($documents)
    {
        $this->container['documents'] = $documents;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


